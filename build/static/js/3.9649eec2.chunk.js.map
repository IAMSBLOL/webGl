{"version":3,"sources":["view/project/layout/layout.module.scss","view/project/layout/layout.js","view/project/layout/index.js"],"names":["module","exports","Layout","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","antialias","alpha","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","console","log","initThree","initCamera","initLight","initCube","animation","setSize","webgl","offsetWidth","offsetHeight","appendChild","domElement","setClearColor","shadowMapEnabled","ambientLight","AmbientLight","directionalLight","DirectionalLight","position","set","normalize","castShadow","shadow","mapSize","width","height","add","z","x","y","initGrid","helper","GridHelper","initCuBe","cubes","original","color","colors","group","Group","group1","group2","group0","i","j","t","Math","floor","random","length","BOXG","BoxGeometry","Mesh","MeshLambertMaterial","alphaTest","overdraw","bottomCube","topCube","rotation","PI","time","requestAnimationFrame","render","preTime","_this2","window","addEventListener","aspect","updateProjectionMatrix","_this3","react_default","a","createElement","className","ref","e","Component"],"mappings":"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","file":"static/js/3.9649eec2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"YKJNj\"};","import React, { Component } from 'react';\r\nimport './layout.module.scss';\r\n// import ali from '../../../../public/images/ali.png'\r\n// import wx from '../../../../public/images/wx.png'\r\n// import bd from '../../../../public/images/bd.png'\r\n// import fb from '../../../../public/images/fb.png'\r\n// import tc from '../../../../public/images/tc.png'\r\n// import BOX from '../../../../public/images/box.png'\r\nimport { Scene,\r\n    PerspectiveCamera,\r\n    WebGLRenderer,\r\n\r\n    BoxGeometry,\r\n    // MeshStandardMaterial,\r\n    Mesh,\r\n    DirectionalLight,\r\n    // BoxGeometry,\r\n    // Object3D,\r\n    GridHelper,\r\n    AmbientLight,\r\n    // MeshNormalMaterial,\r\n    MeshLambertMaterial,\r\n    // RepeatWrapping,\r\n    Group,\r\n    // TextureLoader,\r\n    // LinearFilter\r\n} from 'three';\r\nconst scene = new Scene();\r\n\r\nconst camera = new PerspectiveCamera(70, 1, 0.1, 1000);\r\n\r\nconst renderer = new WebGLRenderer({ antialias: true, alpha: true });\r\n\r\nclass Layout extends Component {\r\n    constructor () {\r\n        super()\r\n        this.preTime = 0\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.start()\r\n        window.addEventListener('resize', () => {\r\n            camera.aspect = this.webgl.offsetWidth / this.webgl.offsetHeight;\r\n            camera.updateProjectionMatrix();\r\n\r\n            renderer.setSize(this.webgl.offsetWidth, this.webgl.offsetHeight);\r\n        }, false);\r\n    }\r\n\r\n    start=() => {\r\n        console.log(scene)\r\n        console.log(camera)\r\n        console.log(renderer)\r\n        this.initThree()\r\n        this.initCamera()\r\n        this.initLight()\r\n        // this.initGrid()\r\n        this.initCube()\r\n        this.animation()\r\n    }\r\n\r\n    initThree=() => {\r\n        renderer.setSize(this.webgl.offsetWidth, this.webgl.offsetHeight);\r\n        this.webgl.appendChild(renderer.domElement);\r\n        renderer.setClearColor(0xEEEEEE, 0.0);\r\n        renderer.shadowMapEnabled = true;\r\n    }\r\n\r\n    initLight=() => {\r\n        const ambientLight = new AmbientLight(0xFFFFFF, 0.44);\r\n        const directionalLight = new DirectionalLight(0xffffff, 0.85);\r\n        directionalLight.position.set(-20, 150, 150).normalize();\r\n\r\n        // Set up shadow properties for the light\r\n\r\n        directionalLight.castShadow = true;\r\n\r\n        directionalLight.shadow.mapSize.width = 500;\r\n        directionalLight.shadow.mapSize.height = 500;\r\n\r\n        scene.add(ambientLight);\r\n        scene.add(directionalLight);\r\n    }\r\n\r\n    initCamera=() => {\r\n        camera.position.z = 460;\r\n        camera.position.x = 0;\r\n        camera.position.y = 60;\r\n        // camera.lookAt({\r\n        //     x: 50,\r\n        //     y: 50,\r\n        //     z: 0\r\n        // })\r\n    }\r\n\r\n    initGrid =() => {\r\n        var helper = new GridHelper(1000, 50, 'red', 'yellow', 'blue');\r\n        helper.position.y = -50;\r\n        // helper.rotation.y = 45;\r\n        scene.add(helper);\r\n        // renderer.render(scene, camera);\r\n    }\r\n\r\n    initCube=() => {\r\n        // this.initCuBe1()\r\n        this.initCuBe()\r\n    }\r\n\r\n    initCuBe=() => {\r\n        // var values = [];\r\n\r\n        var cubes = [];\r\n\r\n        var original = [];\r\n\r\n        var color = false;\r\n\r\n        var colors = [ '#F4F5F9', '#4E86FA', '#4E86FA', '#00A339', '#00A339', '#E78E5C', '#E78E5C',\r\n            '#F4F5F9', '#E78E5C', '#E78E5C', '#00A339', '#F4F5F9', '#FAC367', '#F4F5F9',\r\n            '#F4F5F9', '#E78E5C', '#FAC367', '#00A339', '#00A339', '#FAC367' ];\r\n\r\n        // const imglist = [BOX, BOX, BOX, BOX, BOX, BOX]\r\n\r\n        var group = new Group();\r\n        var group1 = new Group()\r\n        var group2 = new Group()\r\n        var group0 = new Group()\r\n\r\n        for (let i = 0; i < 3; i++) {\r\n            if (!cubes[i]) {\r\n                cubes[i] = [];\r\n                original[i] = [];\r\n            }\r\n\r\n            for (let j = 0; j < 3; j++) {\r\n                if (!cubes[i][j]) {\r\n                    cubes[i][j] = [];\r\n                    original[i][j] = [];\r\n                }\r\n\r\n                for (let t = 0; t < 3; t++) {\r\n                    color = colors[Math.floor(Math.random() * colors.length)];\r\n\r\n                    // var loader = new TextureLoader();\r\n                    // loader.setPath('/public/images/');\r\n                    // var texture = loader.load(\r\n                    //     imglist[Math.floor(Math.random() * imglist.length)]\r\n                    // );\r\n\r\n                    // texture.minFilter = LinearFilter\r\n                    // texture.wrapS = RepeatWrapping;\r\n                    // texture.wrapT = RepeatWrapping;\r\n                    // texture.repeat.set(1, 1);\r\n                    const BOXG = new BoxGeometry(40, 40, 40)\r\n                    // BOXG.faces = imglist\r\n                    cubes[i][j][t] = new Mesh(\r\n                        BOXG,\r\n                        new MeshLambertMaterial({\r\n\r\n                            // map: texture,\r\n                            // skinning: true,\r\n                            alphaTest: 1,\r\n                            color: color,\r\n                            // blendDstAlpha: 6\r\n                            // alphaMap: texture,\r\n                            // aoMap: texture\r\n                            // combine: 2\r\n                        })\r\n                    );\r\n\r\n                    cubes[i][j][t].overdraw = true;\r\n\r\n                    cubes[i][j][t].position.x = i * 45 + Math.random() * 10;\r\n                    cubes[i][j][t].position.y = j * 45 + Math.random() * 10;\r\n                    cubes[i][j][t].position.z = t * 45 + Math.random() * 10;\r\n\r\n                    original[i][j][t] = {\r\n                        x: i * 50,\r\n                        y: j * 50,\r\n                        z: t * 50,\r\n                    };\r\n\r\n                    if (j === 0) {\r\n                        if (i === 1 && t === 1) {\r\n                            this.bottomCube = cubes[i][j][t]\r\n                        }\r\n                        group0.add(cubes[i][j][t])\r\n                    } else if (j === 1) {\r\n                        group1.add(cubes[i][j][t])\r\n                        if (i === 0 && t === 2) {\r\n                            this.topCube = cubes[i][j][t]\r\n                        }\r\n                    } else {\r\n                        if (i === 1 && t === 2) {\r\n\r\n                        } else {\r\n                            group2.add(cubes[i][j][t])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        group.add(group0);\r\n        group.add(group1);\r\n        group.add(group2);\r\n\r\n        group2.rotation.y = 0.15\r\n        group1.rotation.y = 0.15\r\n\r\n        group.position.x = 0\r\n        group.position.y = -70\r\n        group.position.z = 20\r\n        group.rotation.x = -0.17 * Math.PI\r\n        group.rotation.y = -0.27 * Math.PI\r\n\r\n        this.topCube.position.z += 60\r\n        this.topCube.position.x -= 20\r\n        this.topCube.position.y += 50\r\n        this.topCube.rotation.x += 0.3\r\n        this.topCube.rotation.y += 0.3\r\n\r\n        this.bottomCube.position.x += 80\r\n        this.bottomCube.position.y -= 60\r\n        this.bottomCube.position.z -= 80\r\n\r\n        console.log(group)\r\n        this.group = group\r\n        this.cubes = cubes\r\n        scene.add(group);\r\n    }\r\n\r\n    animation=(time) => {\r\n        // console.log(time)\r\n        requestAnimationFrame(this.animation)\r\n        if (Math.floor(time / 1000) % 2 === 0) {\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    for (let t = 0; t < 3; t++) {\r\n                        this.cubes[i][j][t].position.x += 0.1;\r\n                        this.cubes[i][j][t].position.y += 0.1;\r\n                        this.cubes[i][j][t].position.z += 0.1;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 0; i < 3; i++) {\r\n                for (let j = 0; j < 3; j++) {\r\n                    for (let t = 0; t < 3; t++) {\r\n                        this.cubes[i][j][t].position.x -= 0.1;\r\n                        this.cubes[i][j][t].position.y -= 0.1;\r\n                        this.cubes[i][j][t].position.z -= 0.1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.topCube.rotation.x += 0.05\r\n        this.bottomCube.rotation.x += 0.05\r\n        // this.bottomCube.rotation.y += 0.05\r\n        // this.bottomCube.rotation.z += 0.05\r\n\r\n        renderer.render(scene, camera);\r\n    }\r\n    render () {\r\n        return (\r\n            <div styleName='Layout' className='Layout'>\r\n                <div className='webgl' ref={e => { this.webgl = e }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Layout;\r\n","import Layout from './layout'\r\nexport default Layout\r\n"],"sourceRoot":""}