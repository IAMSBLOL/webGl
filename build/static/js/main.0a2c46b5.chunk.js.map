{"version":3,"sources":["core/configureStore.js","reducer/homeReducer/homeReducer.js","reducer/homeReducer/fn.js","reducer/homeReducer/index.js","saga/homeSaga.js","saga/index.js","core/configureStore.prod.js","reducer/index.js","routes.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","require","initState","home","saga","handle","HOME_INITSTATE","state","action","HOME_TEST","payload","Object","assign","TEST_SAGA_SUCCESS","homeReducer","createReducer","homeSaga","regenerator_default","a","wrap","_context","prev","next","takeLatest","stop","_marked","_context2","console","log","put","type","_marked2","rootSaga","all","fork","saga_marked","history","createBrowserHistory","sagaMiddleware","createSagaMiddleware","middleware","thunk","routerMiddleware","configureStore","preloadedState","arguments","length","undefined","store","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","apply","concat","run","routes","path","component","loadable","Promise","__webpack_require__","e","then","bind","window","App","react_default","createElement","locale_provider","locale","zhCN","es","esm","Fragment","renderRoutes","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","container_App","document","getElementById","publicUrl","URL","process","href","origin","addEventListener","warn","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0a2c46b5.chunk.js","sourcesContent":["if (process.env.NODE_ENV === 'production') {\r\n    module.exports = require('./configureStore.prod')\r\n} else {\r\n    module.exports = require('./configureStore.dev')\r\n}\r\n","import { createReducer } from 'yf-helper';\r\nimport * as fn from './fn';\r\n\r\nconst initState = {\r\n    home: 'home',\r\n    saga: 'test'\r\n};\r\n\r\nconst handle = {\r\n    // 初始化\r\n    'HOME_INITSTATE': (state, action) => initState,\r\n    'HOME_TEST': fn.test,\r\n    'TEST_SAGA_SUCCESS': fn.sagaFn\r\n};\r\n\r\nconst homeReducer = createReducer(initState, handle);\r\n\r\nexport default homeReducer;\r\n","export const test = (state, action) => {\r\n    const { payload } = action\r\n    return Object.assign({}, state, { home: payload })\r\n}\r\n\r\nexport const sagaFn = (state, action) => {\r\n    const { payload } = action\r\n    return Object.assign({}, state, { saga: payload })\r\n}\r\n","import homeReducer from './homeReducer';\r\n\r\nexport default homeReducer;\r\n","import { takeLatest, put } from 'redux-saga/effects'\r\nexport default function* homeSaga () {\r\n    yield takeLatest('TEST_SAGA_REQ', home)\r\n}\r\n\r\nfunction* home (action) {\r\n    console.log(action, 7)\r\n    yield put({\r\n        type: 'TEST_SAGA_SUCCESS',\r\n        payload: 'YES I CAN WORK'\r\n    })\r\n}\r\n","\r\nimport { all, fork } from 'redux-saga/effects';\r\nimport homeSaga from './homeSaga';\r\nfunction* rootSaga () {\r\n    yield all([\r\n        fork(homeSaga)\r\n    ])\r\n}\r\n\r\nexport default rootSaga;\r\n","// import { createStore, applyMiddleware } from 'redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport thunk from 'redux-thunk';\r\nimport createRootReducer from '../reducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from '../saga';\r\nimport { createBrowserHistory } from 'history'\r\nconst history = createBrowserHistory()\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middleware = [sagaMiddleware, thunk, routerMiddleware(history)];\r\nconst configureStore = (preloadedState = {}) => {\r\n    const store = createStore(\r\n        createRootReducer(history),\r\n        preloadedState,\r\n        compose(\r\n            applyMiddleware(\r\n                routerMiddleware(history), // for dispatching history actions\r\n                // ... other middlewares ...\r\n                ...middleware,\r\n            ),\r\n        ),\r\n    )\r\n    sagaMiddleware.run(rootSaga);\r\n\r\n    return store;\r\n}\r\n\r\nexport default configureStore();\r\n","\r\nimport { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\n\r\nimport homeReducer from './homeReducer';\r\n\r\nexport default (history) => combineReducers({\r\n    router: connectRouter(history),\r\n    homeReducer\r\n})\r\n","import loadable from '@loadable/component'\r\n\r\n// const LoadableComponent = (importComponent) => {\r\n//     return Loadable({\r\n//         loader: importComponent,\r\n//         loading: () => '....'\r\n//     });\r\n// }\r\n\r\n/**\r\n * 路由配置\r\n */\r\nconst routes = [\r\n    // {\r\n    //     path: '/',\r\n    //     component: loadable(() => import('./view/home/layout'), {\r\n    //         fallback: 'Loading',\r\n    //     }),\r\n    //     routes: [\r\n    //         {\r\n    //             path: '/home/resume',\r\n    //             component: loadable(() => import('./view/home/resume')),\r\n    //         },\r\n    //         {\r\n    //             path: '/home/discribtion',\r\n    //             component: loadable(() => import('./view/home/discribtion')),\r\n    //         }\r\n    //     ]\r\n    // },\r\n    {\r\n        path: '/',\r\n        component: loadable(() => import('./view/project/layout'))\r\n    }\r\n]\r\n\r\nexport default routes;\r\n","import React, { Component } from 'react';\r\nimport { renderRoutes } from 'react-router-config'\r\n// import { BrowserRouter as Router } from 'react-router-dom';\r\nimport routes from '../routes';\r\nimport { Provider } from 'react-redux'\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { createBrowserHistory } from 'history'\r\nimport { LocaleProvider } from 'antd';\r\nimport zhCN from 'antd/lib/locale-provider/zh_CN';\r\n\r\nimport configureStore from '../core/configureStore'\r\n\r\nconst history = createBrowserHistory()\r\nconst store = configureStore;\r\nwindow.store = store;\r\n// import './App.module.scss';\r\n\r\nclass App extends Component {\r\n    render () {\r\n        return (\r\n            <LocaleProvider locale={zhCN}>\r\n                <Provider store={store}>\r\n                    <ConnectedRouter history={history}> { /* place ConnectedRouter under Provider */ }\r\n                        <> { /* your usual react-router v4 routing */ }\r\n                            {renderRoutes(routes)}\r\n                        </>\r\n                    </ConnectedRouter>\r\n                </Provider>\r\n            </LocaleProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register (config) {\r\n    // process.env.NODE_ENV === 'production' &&\r\n    if ('serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        console.log(publicUrl.origin, window.location.origin)\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            console.warn(process.env.PUBLIC_URL, 'process.env.PUBLIC_URL')\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'addEventListener' +\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                console.log(registration, '65656565')\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'registerValidSW' +\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n            console.log(response, 109)\r\n            // 确保这个worker存在，然后请求一下看看\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                console.log('ififif', 115)\r\n                // 没有worker，取消安装且刷新\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        console.log('reload', 118)\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // 找到文件，安装.\r\n                console.log('i can register', 125)\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister () {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.module.scss';\r\nimport App from './container/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}